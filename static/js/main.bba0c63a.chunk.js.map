{"version":3,"sources":["Utils/constants.js","WeatherDashboard/WeatherDashboard.js","App.js","reportWebVitals.js","index.js"],"names":["API","WeatherDashboard","state","currentTemp","message","alertMessage","status","getData","a","axios","get","Constants","response","newTemp","Math","floor","data","timelines","intervals","values","temperature","compareTemp","swal","this","intervalId","setInterval","clearInterval","newStatus","setState","className","style","background","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAAaA,EAAM,mK,OCuFJC,E,4MAhFXC,MAAQ,CACJC,YAAa,IACbC,QAAS,aACTC,aAAc,GACdC,OAAQ,gB,EAeZC,Q,sBAAU,8BAAAC,EAAA,+EAEqBC,IAAMC,IAAIC,GAF/B,OAEIC,EAFJ,OAGMC,EAAUC,KAAKC,MAAMH,EAASI,KAAKA,KAAKC,UAAU,GAAGC,UAAU,GAAGC,OAAOC,aAC7E,EAAKC,YAAYR,GAJnB,gDAMFS,IAAK,4BANH,yD,uDAXV,WAAqB,IAAD,OAChBC,KAAKC,WAAaC,aAChB,kBAAM,EAAKlB,YDhBG,KCkBhBgB,KAAKhB,Y,kCAGT,WACImB,cAAcH,KAAKC,c,yBAavB,SAAYX,GACR,MAAsCU,KAAKrB,MAAtCI,EAAL,EAAKA,OAAQF,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,aAClBsB,EAAY,GAEhB,QAAQ,GACJ,KAAOd,GAAW,GACdT,EAAU,aACVC,EAAc,aACdsB,EAAY,QACZ,MACJ,KAAOd,GAAW,EACdT,EAAU,cACVC,EAAe,+BACfsB,EAAY,MACZ,MACJ,KAAOd,EAAU,GAAKA,EAAU,GAC5BT,EAAU,eACVC,EAAe,mCACfsB,EAAY,SAKfrB,IAAWqB,GACZL,IAAKjB,GAETkB,KAAKK,SAAS,CAAEzB,YAAaU,EAAST,QAASA,EAASE,OAAQqB,M,oBAGpE,WACI,MAAuCJ,KAAKrB,MAArCI,EAAP,EAAOA,OAAQF,EAAf,EAAeA,QAASD,EAAxB,EAAwBA,YAExB,OACI,qBAAK0B,UAAU,WACXC,MAAO,CACHC,WAAW,wBAAD,OAA0BzB,EAA1B,UAFlB,SAII,qBAAKuB,UAAY,YAAjB,SACI,sBAAKA,UAAY,UAAjB,UACI,mBAAGA,UAAY,SAAf,4CACA,uBAAMA,UAAY,cAAlB,UACK1B,EADL,UAGA,mBAAG0B,UAAY,UAAf,SAA0BzB,e,GAzEnB4B,aCIhBC,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCOSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bba0c63a.chunk.js","sourcesContent":["export const API = 'https://api.tomorrow.io/v4/timelines?location=6086b0802d517200076909b9&fields=temperature&timesteps=current&units=metric&apikey=HVIwYjZHra24Ah3uihus6Oh5pYRh6fXQ';\r\nexport const Interval = 900000;","import React, { Component } from 'react';\r\nimport './WeatherDashboard.css';\r\nimport axios from \"axios\";\r\nimport swal from 'sweetalert';\r\nimport * as Constants from '../Utils/constants';\r\n\r\nclass WeatherDashboard extends Component {\r\n    state = {\r\n        currentTemp: '-',\r\n        message: 'Loading...',\r\n        alertMessage: '',\r\n        status: 'loadingColor'\r\n      \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.intervalId = setInterval(\r\n          () => this.getData(),\r\n          Constants.Interval);\r\n        this.getData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    getData = async () => {\r\n        try {\r\n            const response = await axios.get(Constants.API);\r\n                let newTemp = Math.floor(response.data.data.timelines[0].intervals[0].values.temperature);\r\n                this.compareTemp(newTemp);\r\n        } catch (err) {\r\n            swal('No Information Available');\r\n        }\r\n    }\r\n    \r\n    compareTemp(newTemp) {\r\n        let {status, message, alertMessage} = this.state;\r\n        let newStatus = '';\r\n        \r\n        switch (true) {\r\n            case ( newTemp <= 15 ):\r\n                message = 'All Clear!';\r\n                alertMessage= 'All Clear!';\r\n                newStatus = 'green';\r\n                break;\r\n            case ( newTemp <= 5 ):\r\n                message = 'Danger Cold';\r\n                alertMessage = 'Stop the work and get inside';\r\n                newStatus = 'red';\r\n                break;\r\n            case ( newTemp > 5 && newTemp < 15 ):\r\n                message = 'Extreme Cold';\r\n                alertMessage = 'Keep You Warm (Hot Drinks/Soups)';\r\n                newStatus = 'orange';  \r\n                break;\r\n            default: \r\n                break;\r\n        }\r\n        if ( status !== newStatus ) {\r\n            swal(alertMessage);\r\n        }\r\n        this.setState({ currentTemp: newTemp, message: message ,status: newStatus});\r\n    }\r\n\r\n    render() {\r\n        const {status, message, currentTemp} = this.state;\r\n  \r\n        return (\r\n            <div className=\"mainPage\"\r\n                style={{\r\n                    background: `url(/current-weather/${status}.jpg)`\r\n                }}>\r\n                <div className = \"container\">\r\n                    <div className = \"content\">\r\n                        <p className = \"header\">The Current Weather in JKF Is:</p>\r\n                        <span className = \"currentTemp\">\r\n                            {currentTemp}Â°\r\n                        </span>\r\n                        <p className = \"message\">{message}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherDashboard;\r\n","import WeatherDashboard from './WeatherDashboard/WeatherDashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherDashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
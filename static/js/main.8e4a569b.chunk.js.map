{"version":3,"sources":["logo.svg","WeatherDashboard/WeatherDashboard.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherDashboard","state","currentTemp","status","message","this","intervalId","setInterval","getData","clearInterval","axios","get","then","response","newTemp","Math","floor","data","timelines","intervals","values","temperature","compareTemp","catch","error","console","log","swal","setState","className","style","background","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAe,I,+EC+EAA,E,4MArEXC,MAAQ,CACJC,YAAa,IACbC,OAAQ,MACRC,QAAS,c,uDAIb,WAAqB,IAAD,OAChBC,KAAKC,WAAaC,aAAY,kBAAM,EAAKC,YAXhC,KAYTH,KAAKG,Y,kCAGT,WACIC,cAAcJ,KAAKC,c,qBAGvB,WAAW,IAAD,OACFI,IAAMC,IArBN,oKAsBCC,MAAK,SAAAC,GACF,IAAIC,EAAUC,KAAKC,MAAMH,EAASI,KAAKA,KAAKC,UAAU,GAAGC,UAAU,GAAGC,OAAOC,aAC7E,EAAKC,YAAYR,MAClBS,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,yBAIxB,SAAYV,GACJA,IAAYT,KAAKJ,MAAMC,cACnBY,GAAW,IACPT,KAAKJ,MAAMC,YAAc,IACzByB,IAAK,cAETtB,KAAKuB,SAAS,CAAE1B,YAAaY,EAASX,OAAQ,QAASC,QAAS,gBAEzDU,GAAW,GACdT,KAAKJ,MAAMC,YAAc,GACzByB,IAAK,gCAETtB,KAAKuB,SAAS,CAAE1B,YAAaY,EAASX,OAAQ,MAAOC,QAAS,mBAG1DC,KAAKJ,MAAMC,aAAe,IAAMG,KAAKJ,MAAMC,aAAe,IAC1DyB,IAAK,oCAETtB,KAAKuB,SAAS,CAAE1B,YAAaY,EAASX,OAAQ,SAAUC,QAAS,qB,oBAK7E,WACI,OACI,qBAAKyB,UAAU,WACXC,MAAO,CACHC,WAAY,yBAAsC1B,KAAKJ,MAAME,OAAS,UAF9E,SAII,qBAAK0B,UAAU,YAAf,SACI,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,SAAb,4CACA,uBAAMA,UAAU,cAAhB,UACKxB,KAAKJ,MAAMC,YADhB,UAGA,mBAAG2B,UAAU,UAAb,SAAwBxB,KAAKJ,MAAMG,qB,GA9D5B4B,aCEhBC,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8e4a569b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\r\nimport './WeatherDashboard.css';\r\nimport axios from \"axios\";\r\nimport swal from 'sweetalert';\r\n\r\n\r\nconst api = 'https://api.tomorrow.io/v4/timelines?location=60809ca688a6a60007947ca2&fields=temperature&timesteps=current&units=metric&apikey=HVIwYjZHra24Ah3uihus6Oh5pYRh6fXQ';\r\nconst Interval = 900000;\r\n\r\nclass WeatherDashboard extends Component {\r\n    state = {\r\n        currentTemp: '-',\r\n        status: 'red',\r\n        message: 'Loading...'\r\n      \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.intervalId = setInterval(() => this.getData(), Interval);\r\n        this.getData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    getData() {\r\n            axios.get(api)\r\n            .then(response => {\r\n                let newTemp = Math.floor(response.data.data.timelines[0].intervals[0].values.temperature)\r\n                this.compareTemp(newTemp);\r\n            }).catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    compareTemp(newTemp) {\r\n        if (newTemp !== this.state.currentTemp) {\r\n            if (newTemp >= 15) {\r\n                if (this.state.currentTemp < 15) {\r\n                    swal(\"All Clear!\");\r\n                }\r\n                this.setState({ currentTemp: newTemp, status: 'green', message: \"All Clear!\" });\r\n\r\n            } else if (newTemp <= 5) {\r\n                if (this.state.currentTemp > 5) {\r\n                    swal(\"Stop the work and get inside\");\r\n                }\r\n                this.setState({ currentTemp: newTemp, status: 'red', message: \"Danger Cold\" });\r\n\r\n            } else {\r\n                if (this.state.currentTemp >= 15 || this.state.currentTemp <= 5) {\r\n                    swal(\"Keep You Warm (Hot Drinks/Soups)\");\r\n                }\r\n                this.setState({ currentTemp: newTemp, status: 'orange', message: \"Extreme Cold\" });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"mainPage\"\r\n                style={{\r\n                    background: \"url('\"+process.env.PUBLIC_URL+ \"/\" + this.state.status + \".jpg')\",\r\n                }}>\r\n                <div className=\"container\">\r\n                    <div className=\"content\">\r\n                        <p className=\"header\">The Current Weather in JKF Is:</p>\r\n                        <span className=\"currentTemp\">\r\n                            {this.state.currentTemp}Â°\r\n                        </span>\r\n                        <p className=\"message\">{this.state.message}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherDashboard;\r\n","import logo from './logo.svg';\nimport WeatherDashboard from './WeatherDashboard/WeatherDashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherDashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
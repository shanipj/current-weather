{"version":3,"sources":["WeatherDashboard/WeatherDashboard.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherDashboard","state","currentTemp","message","alertMessage","status","this","intervalId","setInterval","getData","clearInterval","axios","get","then","response","temperature","data","timelines","intervals","values","newTemp","Math","floor","compareTemp","catch","error","swal","setState","currentStatus","currentMessage","className","style","background","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAyFeA,E,4MAhFXC,MAAQ,CACJC,YAAa,IACbC,QAAS,aACTC,aAAc,GACdC,OAAQ,gB,uDAIZ,WAAqB,IAAD,OAChBC,KAAKC,WAAaC,aAChB,kBAAM,EAAKC,YAbJ,KAeTH,KAAKG,Y,kCAGT,WACIC,cAAcJ,KAAKC,c,qBAGvB,WAAW,IAAD,OACFI,IAAMC,IAxBN,oKAyBCC,MAAK,SAAAC,GACF,IAAIC,EAAcD,EAASE,KAAKA,KAAKC,UAAU,GAAGC,UAAU,GAAGC,OAAOJ,YAClEK,EAAUC,KAAKC,MAAMP,GACzB,EAAKQ,YAAYH,MAClBI,OAAM,SAAAC,GACLC,IAAK,iC,yBAIjB,SAAYN,GACR,IAAIjB,EAAU,GACVC,EAAe,GACfC,EAAS,GAGRe,GAAW,IACZjB,EAAU,aACVC,EAAe,aACfC,EAAS,SACHe,GAAW,GACjBjB,EAAU,cACVC,EAAe,+BACfC,EAAS,QAETF,EAAU,eACVC,EAAe,mCACfC,EAAS,UAbOC,KAAKL,MAAMI,SAgBRA,IACnBqB,IAAKtB,GACLE,KAAKqB,SAAS,CAAEzB,YAAakB,EAASjB,QAASA,EAASE,OAAQA,O,oBAIxE,WACI,IAAMuB,EAAgBtB,KAAKL,MAAMI,OAC3BwB,EAAiBvB,KAAKL,MAAME,QAC5BD,EAAcI,KAAKL,MAAMC,YAE/B,OACI,qBAAK4B,UAAU,WACXC,MAAO,CACHC,WAAY,yBAAsCJ,EAAgB,UAF1E,SAII,qBAAKE,UAAU,YAAf,SACI,sBAAKA,UAAU,UAAf,UACI,mBAAGA,UAAU,SAAb,4CACA,uBAAMA,UAAU,cAAhB,UACK5B,EADL,UAGA,mBAAG4B,UAAU,UAAb,SAAwBD,e,GAzEjBI,aCEhBC,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCOSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3123cf9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './WeatherDashboard.css';\r\nimport axios from \"axios\";\r\nimport swal from 'sweetalert';\r\n\r\nconst api = 'https://api.tomorrow.io/v4/timelines?location=60809ca688a6a60007947ca2&fields=temperature&timesteps=current&units=metric&apikey=HVIwYjZHra24Ah3uihus6Oh5pYRh6fXQ';\r\nconst Interval = 900000;\r\n\r\nclass WeatherDashboard extends Component {\r\n    state = {\r\n        currentTemp: \"-\",\r\n        message: 'Loading...',\r\n        alertMessage: '',\r\n        status: 'loadingColor'\r\n      \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.intervalId = setInterval(\r\n          () => this.getData(),\r\n           Interval);\r\n        this.getData();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalId);\r\n    }\r\n\r\n    getData() {\r\n            axios.get(api)\r\n            .then(response => {\r\n                let temperature = response.data.data.timelines[0].intervals[0].values.temperature;\r\n                let newTemp = Math.floor(temperature);\r\n                this.compareTemp(newTemp);\r\n            }).catch(error => {\r\n                swal('No Information Available');\r\n            })\r\n    }\r\n\r\n    compareTemp(newTemp) {\r\n        let message = '';\r\n        let alertMessage = '';\r\n        let status = '';\r\n        let currentStatus = this.state.status;\r\n    \r\n        if ( newTemp >= 15 ){\r\n            message = 'All Clear!';\r\n            alertMessage = 'All Clear!';\r\n            status = 'green';  \r\n        }else if( newTemp <= 5 ){\r\n            message = 'Danger Cold';\r\n            alertMessage = 'Stop the work and get inside';\r\n            status = 'red';\r\n        }else {\r\n            message = 'Extreme Cold';\r\n            alertMessage = 'Keep You Warm (Hot Drinks/Soups)';\r\n            status = 'orange';  \r\n        }\r\n                    \r\n        if ( currentStatus !== status ) {\r\n            swal(alertMessage);\r\n            this.setState({ currentTemp: newTemp, message: message ,status: status});\r\n        }\r\n    }  \r\n\r\n    render() {\r\n        const currentStatus = this.state.status;\r\n        const currentMessage = this.state.message;\r\n        const currentTemp = this.state.currentTemp;\r\n\r\n        return (\r\n            <div className=\"mainPage\"\r\n                style={{\r\n                    background: \"url('\"+process.env.PUBLIC_URL+ \"/\" + currentStatus + \".jpg')\",\r\n                }}>\r\n                <div className=\"container\">\r\n                    <div className=\"content\">\r\n                        <p className=\"header\">The Current Weather in JKF Is:</p>\r\n                        <span className=\"currentTemp\">\r\n                            {currentTemp}Â°\r\n                        </span>\r\n                        <p className=\"message\">{currentMessage}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WeatherDashboard;\r\n","import WeatherDashboard from './WeatherDashboard/WeatherDashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherDashboard/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}